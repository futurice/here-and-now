################################################################################
## Classpath:
##
## Classpath setting can be used to add paths to the class loader that is used
## to load the router's modules.
##
#Core.classpaths =
################################################################################


################################################################################
## Node Identity:
##
## This defines the identity to be used by the router.
##
uniqueID.class = fi.tkk.netlab.dtn.scampi.core.identity.RSASHA256
uniqueID.autogenerate = true
uniqueID.path = router/id.rsasha256
Core.nodeID = uniqueID
################################################################################


################################################################################
## Caches:
##
## These settings define the caches to be used by the router. There are three
## different caches: rotating local cache, persistent local cache, and a peer
## cache. The first two are used to hold bundles generated by local applications
## and the last one is used to store bundles received from other router.
##
localPersistentCache.class = fi.tkk.netlab.dtn.scampi.core.FIFOCacheManager
localPersistentCache.path = router/persistent_cache
localPersistentCache.disableTTL = false

localCache.class = fi.tkk.netlab.dtn.scampi.core.FIFOCacheManager
localCache.cacheSize = 4G
localCache.disableTTL = false
localCache.path = router/local_cache

peerCache.class = fi.tkk.netlab.dtn.scampi.core.FIFOCacheManager
peerCache.cacheSize = 4G
peerCache.path = router/peer_cache
peerCache.disableTTL = false

Core.localCache = localCache
Core.peerCache = peerCache
Core.persistentCache = localPersistentCache
################################################################################


################################################################################
## Communications
##
## The router tracks available communication interfaces (e.g.,
## local IPv4 addresses) through interface discoverers. Interface discoverers
## attach services to discovered interfaces as configured below.
##
# Interface for IPv4 addresses of the local host
ipv4tracker.class = fi.tkk.netlab.dtn.scampi.comms.interfaces.IPv4InterfaceDiscoverer
ipv4tracker.interfaceConfig = ipv4interface

# Interface discoverer for IPv6 addresses of the local host
ipv6tracker.class = fi.tkk.netlab.dtn.scampi.comms.interfaces.IPv6InterfaceDiscoverer
ipv6tracker.interfaceConfig = ipv6interface

# Interface for loopback addresses
loopback.class = fi.tkk.netlab.dtn.scampi.comms.interfaces.LoopbackInterfaceDiscoverer
loopback.interfaceConfig = loopbackInterface

Core.interfaceDiscoverers = ipv4tracker, loopback
################################################################################


################################################################################
## Interface configurations
##
## These are configurations used for interfaces discovered byt eh interface
## discoverers.
##
# Interfaces used for local IPv4 addresses
ipv4interface.discoverers = liberouterDiscoverer, edisonDiscoverer
#ipv4interface.announcers = passiveAnnouncer
ipv4interface.bundleServices = tcpclBundleService
ipv4interface.topologyController = fullMesh
ipv4interface.consoles = defaultConsole
#ipv4interface.tcpJsonMonitors = tcpJsonMonitor

# Interfaces used for local IPv6 addresses
#ipv6interface.discoverers = multicastDiscoverer
ipv6interface.announcers = passiveAnnouncer
ipv6interface.bundleServices = tcpclBundleService
ipv6interface.topologyController = fullMesh

# Interfaces used for loopback, bind API server and console to loopback
loopbackInterface.apiServers = defaultAPI
loopbackInterface.consoles = defaultConsole
loopbackInterface.topologyController = fullMesh
################################################################################


################################################################################
## Topology controllers
##
## Topology controllers define how to open links through communication
## interfaces. Full mesh controller attempts to open links to all discovered
## peers on the interface, resulting in a full mesh network.
##
fullMesh.class = fi.tkk.netlab.dtn.scampi.comms.interfaces.FullMeshTopologyController

limitedMesh.class = fi.tkk.netlab.dtn.scampi.comms.topology.LimitedMeshTopologyController
limitedMesh.maxInitiatedConnections = 1
limitedMesh.failedRetryTimeout = 5
limitedMesh.rotatePeriodSeconds = 600
################################################################################


################################################################################
## Bundle Services:
##
## Bundle services allow other routers to connect to this one and exchange
## messages. Currently only TCPCL based bundle services are implemented.
## Port settings defined here must match what is advertised by the discovery
## mechanisms defined below.
##
tcpclBundleService.class = fi.tkk.netlab.dtn.scampi.comms.bundleservices.TCPCLBundleService
tcpclBundleService.port = 7895

Core.bundleServices = tcpclBundleService
################################################################################


################################################################################
## Discovery:
##
## These settings define how the router advertises itself and how it attempts
## to discover other routers.
##
## There are two types of discovery mechanisms currently implemented. Unicast
## discovery using a PassiveAnnouncer/UnicastDiscoverer pair, and multicast
## discovery using the UDPDiscoverer.
##
unicastDiscoverer.class = fi.tkk.netlab.dtn.scampi.comms.discovery.UnicastDiscoverer
unicastDiscoverer.targetAddress = obelix.netlab.hut.fi
unicastDiscoverer.targetPort = 7880

multicastDiscoverer.class = fi.tkk.netlab.dtn.scampi.comms.discovery.UDPDiscoverer
# These define which local bundle services are advertised:
multicastDiscoverer.bundleServiceTypes = tcpcl
multicastDiscoverer.bundleServicePorts = 7895

liberouterDiscoverer.class = fi.tkk.netlab.dtn.scampi.comms.discovery.UnicastDiscoverer
liberouterDiscoverer.targetAddress = 192.168.2.1
liberouterDiscoverer.targetPort = 1234
liberouterDiscoverer.recheckPeriod = 10

edisonDiscoverer.class = fi.tkk.netlab.dtn.scampi.comms.discovery.UnicastDiscoverer
edisonDiscoverer.targetAddress = 192.168.42.1
edisonDiscoverer.targetPort = 1234
edisonDiscoverer.recheckPeriod = 10

monochromeDiscoverer.class = fi.tkk.netlab.dtn.scampi.comms.discovery.UnicastDiscoverer
monochromeDiscoverer.targetAddress = monochrome.iceblinksoftware.com
monochromeDiscoverer.targetPort = 2244
monochromeDiscoverer.recheckPeriod = 10

passiveAnnouncer.class = fi.tkk.netlab.dtn.scampi.comms.discovery.PassiveAnnouncer
# These define which local bundle services are advertised:
passiveAnnouncer.port = 1234
passiveAnnouncer.bundleServiceTypes = tcpcl
passiveAnnouncer.bundleServiceParams = 7895

Discovery.discoverers = unicastDiscoverer, multicastDiscoverer, liberouterDiscoverer
Discovery.announcers = passiveAnnouncer

## By default the nodes will do multi-hop discovery by exchanging discovery
## control messages. This mechanism can be disabled here.
Core.multihopDiscovery = false
################################################################################


################################################################################
## Routing:
##
## Routing modules are used to define which bundles the router will request
## from connected peers.
epidemicRouter.class = fi.tkk.netlab.dtn.scampi.routing.modules.Epidemic
epidemicRouter.priority = 100

Core.routingModules = epidemicRouter
################################################################################


################################################################################
## Location Providers:
##
## Location providers are used to let the router learn its geographical
## location.
##

## Static location provider provides a predefined location
#staticLocProvider.class = fi.tkk.netlab.dtn.scampi.locationservices.#StaticLocationProvider
#staticLocProvider.longitude = 60.189329
#staticLocProvider.latitude = 24.837213

## Peer location provider attempts to learn the location from the location
## announcement messages generated by peers.
#peerLocProvider.class = fi.tkk.netlab.dtn.scampi.locationservices.PeerLocationProvider

#Core.locationProviders = staticLocProvider, peerLocProvider
################################################################################


################################################################################
## Plugins:
##
## Generic plugins that can be loaded into the router. This is experimental
## and not fully supported yet.
##
#testPlugin.class = fi.tkk.netlab.dtn.scampi.testing.TestPlugin
#Core.plugins = testPlugin
################################################################################


################################################################################
## API:
##
## These settings define the API that can be used by local applications.
##
defaultAPI.port = 7744
Core.APIs = defaultAPI
################################################################################


################################################################################
## Console:
##
## These settings define the telnet management consoles for the router.
##
defaultConsole.port = 5050
Core.consoles = defaultConsole
################################################################################


################################################################################
## TCP JSON Monitors:
##
## These settings define the TCP JSON monitors to attach to interfaces.
##
tcpJsonMonitor.port = 14141
################################################################################


################################################################################
## Logging:
##
## The router provides two types of logging: Human readable logs, and machine
## readable JSON logs. Human readable logs are free form with multiple log
## levels, intended for debugging and observing the router operation.
## Machine readable logs are strictly defined JSON log objects for specific
## events (e.g., link up, link down, bundle received) that are intended for
## measurements and analysis.
##
## For both types of logs, on startup any existing logs are compressed into a
## zip archive so that the log directories only contain text logs from the
## current run.
##

## These are the human readable logs
Core.logToFile = true
# Number of log files that are rotated
Core.logNumFiles = 2
# Maximum size of a log file
Core.logFileSize = 1M
Core.logFileDir = router/logs

## These are the JSON logs
jsonLogger.logFile = jsonlogs.txt
jsonLogger.logDir = router/json
#Core.jsonLogger = jsonLogger
################################################################################


################################################################################
## Misc Settings:
##
## These are miscellaneous settings for the router.
##

## Temporary directory, all files in this dir will be deleted on launch.
Core.tmpDir = router/tmp

## Persistent storage path, the main storage in this dir should persist
## between router launches.
Storage.path = router/storage

## Maximum size for message parts to be held in memory. Message parts larger
## than this will be written on disk instead.
## NOTE: This must be equal or less than the maximum in-memory message part
## size of the API protocol (currently 20KB)
Core.fileBackingThreshold = 15000

################################################################################

